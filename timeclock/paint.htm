<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Fullscreen Drawing Page</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }

        #container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #000;
            overflow: hidden;
        }

        #canvas {
            width: 100%;
            height: 100%;
            cursor: crosshair;
            transform-origin: 0 0;
        }

        #controls {
            position: fixed;
            top: 20px;
            left: 20px;
        }

        #controls input {
            margin-right: 10px;
        }

        #save-btn,
        #load-btn {
            margin-top: 10px;
        }
		 #controls a {
				color: #fff;
				font-family: Tahoma, sans-serif;
				text-decoration: none;
				text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;
		 }
    </style>
</head>
<body>
    <div id="container">
        <canvas id="canvas"></canvas>
    </div>

    <div id="controls">
        <input type="color" id="color-picker">
        <button id="eraser-btn">Eraser</button>
        <button id="save-btn">Save</button>
        <input type="file" id="load-btn" accept=".png">
        <button id="zoom-in-btn">Zoom In</button>
        <button id="zoom-out-btn">Zoom Out</button>
		 <a onclick="history.back();">Back</a>
    </div>

    <script>
        const canvas = document.getElementById('canvas');
        const context = canvas.getContext('2d');
        const colorPicker = document.getElementById('color-picker');
        const eraserButton = document.getElementById('eraser-btn');
        const saveButton = document.getElementById('save-btn');
        const loadButton = document.getElementById('load-btn');
        const zoomInButton = document.getElementById('zoom-in-btn');
        const zoomOutButton = document.getElementById('zoom-out-btn');

        // Set canvas size to match window size
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;
        let color = '#ffffff';
        let scale = 1;

        function startDrawing(e) {
            isDrawing = true;
            lastX = getMouseX(e);
            lastY = getMouseY(e);
        }

        function draw(e) {
            if (!isDrawing) return;

            const mouseX = getMouseX(e);
            const mouseY = getMouseY(e);

            context.strokeStyle = color;
            context.lineJoin = 'round';
            context.lineCap = 'round';
            context.lineWidth = 5 / scale;

            context.beginPath();
            context.moveTo(lastX, lastY);
            context.lineTo(mouseX, mouseY);
            context.stroke();

            lastX = mouseX;
            lastY = mouseY;
        }

        function stopDrawing() {
            isDrawing = false;
        }

        function setEraserMode() {
            color = '#000000';
        }

        function saveDrawing() {
            const dataURL = canvas.toDataURL('image/png');
            const link = document.createElement('a');
            link.href = dataURL;
            link.download = prompt('Enter a filename', 'drawing.png') || 'drawing.png';
            link.click();
        }

        function loadDrawing(e) {
            const file = e.target.files[0];
            const reader = new FileReader();

            reader.onload = function (event) {
                const img = new Image();
                img.onload = function () {
                    context.clearRect(0, 0, canvas.width, canvas.height);
                    context.drawImage(img, 0, 0);
                };
                img.src = event.target.result;
            };

            reader.readAsDataURL(file);
        }

        function zoomIn() {
            scale *= 1.2;
            applyZoom();
        }

        function zoomOut() {
            scale /= 1.2;
            applyZoom();
        }

        function applyZoom() {
            canvas.style.transform = `scale(${scale})`;
        }

        function getMouseX(e) {
            return (e.clientX || e.touches[0].clientX) / scale;
        }

        function getMouseY(e) {
            return (e.clientY || e.touches[0].clientY) / scale;
        }

        colorPicker.addEventListener('change', function (e) {
            color = e.target.value;
        });

        eraserButton.addEventListener('click', setEraserMode);
        saveButton.addEventListener('click', saveDrawing);
        loadButton.addEventListener('change', loadDrawing);
        zoomInButton.addEventListener('click', zoomIn);
        zoomOutButton.addEventListener('click', zoomOut);

        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);

        // Touch events
        canvas.addEventListener('touchstart', startDrawing);
        canvas.addEventListener('touchmove', draw);
        canvas.addEventListener('touchend', stopDrawing);
        canvas.addEventListener('touchcancel', stopDrawing);
    </script>
</body>
</html>
